
import { GoogleGenAI, Modality, HarmCategory, HarmBlockThreshold } from "@google/genai";
import { ImageData } from "../types";

// Initialize the AI client directly with the environment variable as per guidelines.
// This assumes `process.env.API_KEY` is securely provided in the execution environment.
const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

// Define strict safety settings to prevent unsafe content generation.
const safetySettings = [
  {
    category: HarmCategory.HARM_CATEGORY_HARASSMENT,
    threshold: HarmBlockThreshold.BLOCK_LOW_AND_ABOVE,
  },
  {
    category: HarmCategory.HARM_CATEGORY_HATE_SPEECH,
    threshold: HarmBlockThreshold.BLOCK_LOW_AND_ABOVE,
  },
  {
    category: HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT,
    threshold: HarmBlockThreshold.BLOCK_LOW_AND_ABOVE,
  },
  {
    category: HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT,
    threshold: HarmBlockThreshold.BLOCK_LOW_AND_ABOVE,
  },
];

// System instruction to prevent processing images of minors.
const systemInstruction = "You are a responsible AI image editing assistant. Your most critical safety rule is to never process, edit, or generate images that depict children or individuals who appear to be under 18 years of age. If an uploaded image seems to contain a minor, you must strictly refuse the request. Do not proceed with the edit. Instead, reply with only the following text: 'Error: Image appears to contain a child and cannot be processed.'";

export const editImageWithGemini = async (
  originalImage: ImageData,
  prompt: string,
  referenceImage: ImageData | null = null
): Promise<string> => {
  if (!process.env.API_KEY) {
    throw new Error("Gemini AI client is not configured. The API_KEY is missing from the environment.");
  }

  const parts: any[] = [
    {
      inlineData: {
        data: originalImage.base64,
        mimeType: originalImage.mimeType,
      },
    },
  ];

  if (referenceImage) {
    parts.push({
      inlineData: {
        data: referenceImage.base64,
        mimeType: referenceImage.mimeType,
      },
    });
  }

  parts.push({ text: prompt });

  try {
    const apiCall = ai.models.generateContent({
      model: 'gemini-2.5-flash-image-preview',
      contents: { parts: parts },
      config: {
        responseModalities: [Modality.IMAGE, Modality.TEXT],
        safetySettings,
        systemInstruction,
      },
    });

    const timeoutPromise = new Promise((_, reject) =>
      setTimeout(() => reject(new Error("The AI generation is taking longer than expected. Please try again.")), 60000) // 60-second timeout
    );

    const response: any = await Promise.race([apiCall, timeoutPromise]);

    // Per system instruction, check for text-based error response
    if (response.text?.trim().startsWith("Error:")) {
      throw new Error(response.text.trim());
    }

    // According to guidelines, loop through parts to find image data
    for (const part of response.candidates[0].content.parts) {
      if (part.inlineData && part.inlineData.data) {
        return part.inlineData.data;
      }
    }

    throw new Error("No image was generated by the AI. The model may have refused the request due to safety policies.");
  } catch (error) {
    console.error("Gemini API error:", error);
    let friendlyMessage = "An error occurred while communicating with the AI. Please try again.";
    if (error instanceof Error) {
      if (error.message.includes('SAFETY')) {
        friendlyMessage = "The request was blocked due to safety settings. Please ensure your prompt and image are appropriate.";
      } else {
        friendlyMessage = error.message;
      }
    }
    throw new Error(friendlyMessage);
  }
};