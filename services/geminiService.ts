
import { GoogleGenAI, Modality } from "@google/genai";
import { ImageData } from "../types";

// Initialize the AI client directly with the environment variable as per guidelines.
// This assumes `process.env.API_KEY` is securely provided in the execution environment.
const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

export const editImageWithGemini = async (
  originalImage: ImageData,
  prompt: string,
  referenceImage: ImageData | null = null
): Promise<string> => {
  if (!process.env.API_KEY) {
    throw new Error("Gemini AI client is not configured. The API_KEY is missing from the environment.");
  }

  const parts: any[] = [
    {
      inlineData: {
        data: originalImage.base64,
        mimeType: originalImage.mimeType,
      },
    },
  ];

  if (referenceImage) {
    parts.push({
      inlineData: {
        data: referenceImage.base64,
        mimeType: referenceImage.mimeType,
      },
    });
  }

  parts.push({ text: prompt });

  try {
    const apiCall = ai.models.generateContent({
      model: 'gemini-2.5-flash-image-preview',
      contents: { parts: parts },
      config: {
        responseModalities: [Modality.IMAGE, Modality.TEXT],
      },
    });

    const timeoutPromise = new Promise((_, reject) =>
        setTimeout(() => reject(new Error("The AI generation is taking longer than expected. Please try again.")), 60000) // 60-second timeout
    );

    const response: any = await Promise.race([apiCall, timeoutPromise]);

    // According to guidelines, loop through parts to find image data
    for (const part of response.candidates[0].content.parts) {
        if (part.inlineData && part.inlineData.data) {
            return part.inlineData.data;
        }
    }

    throw new Error("No image was generated by the AI. The model may have refused the request due to safety policies.");
  } catch (error) {
    console.error("Gemini API error:", error);
    if (error instanceof Error) {
        // Try to parse the message as JSON for more specific feedback from the API
        try {
            const errorJson = JSON.parse(error.message);
            if (errorJson.error?.message) {
                const message = errorJson.error.message;
                // Provide a more user-friendly message for generic internal errors
                if (errorJson.error.status === 'INTERNAL') {
                    throw new Error('The AI service is currently unavailable. Please try again later.');
                }
                throw new Error(`AI Error: ${message}`);
            }
        } catch (parseError) {
            // Not a JSON error, so just pass the original message through.
            // This includes our own timeout messages.
            throw new Error(error.message);
        }
    }
    // Generic fallback for any other type of error
    throw new Error("An unknown error occurred during image generation.");
  }
};
